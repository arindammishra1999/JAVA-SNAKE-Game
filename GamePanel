import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import java.util.Random;


import javax.swing.JPanel;

@SuppressWarnings("serial")
public class GamePanel extends JPanel implements ActionListener {
	
	
	static final int SCREEN_WIDTH = 600;
	static final int SCREEN_HEIGHT = 600;
	static final int UNIT_SIZE = 15;
	static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT)/UNIT_SIZE;
	static final int DELAY = 70;
	
	final int x [] = new int [GAME_UNITS];
	final int y [] = new int [GAME_UNITS];
	int bodyParts = 6;
	int cakesEaten = 0;
	int cakeX;
	int cakeY;
	char direction = 'R';
	boolean running = false;
	Timer timer;
	Random random;
	
	GamePanel(){
		random = new Random();
		this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
		this.setBackground(Color.black);
		this.setFocusable(true);
		this.addKeyListener(new myKeyAdapter());
		startGame();
		
	}
	
	public void startGame() {
		newCake();
		running = true;
		timer = new Timer(DELAY,this);
		timer.start();
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		draw(g);
		
	}
	
	public void draw(Graphics g) {
		
		if(running) {
			for(int i=0;i<SCREEN_HEIGHT/UNIT_SIZE;i++) {
				g.drawLine(i*UNIT_SIZE, 0, i*UNIT_SIZE,SCREEN_HEIGHT);
				g.drawLine(0, i*UNIT_SIZE, SCREEN_WIDTH,i*UNIT_SIZE);	
			}
			g.setColor(Color.red);
			g.fillOval(cakeX, cakeY, UNIT_SIZE, UNIT_SIZE);
		
			for(int i=0;i<bodyParts;i++) {
				if(i==0) {
					g.setColor(Color.green);
					g.fillOval(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
				else {
					g.setColor(new Color(45,180,0));
					g.setColor(new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255)));
					g.fillOval(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
			}
			
			g.setColor(Color.red);
			g.setFont(new Font("Georgia",Font.PLAIN,20));
			FontMetrics metrics = getFontMetrics(g.getFont());
			g.drawString("Score: "+cakesEaten,(SCREEN_WIDTH - metrics.stringWidth("Score: "+cakesEaten))-10, g.getFont().getSize());
			
		}
		else {
			gameOver(g);
		}
		
	}
	
	public void newCake() {
		cakeX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
		cakeY = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE))*UNIT_SIZE;
			
	}
	
	public void move() {
		for(int i=bodyParts;i>0;i--) {
			x[i] = x[i-1];
			y[i] = y[i-1];
		}
		switch(direction) {
		case'U':
			y[0] = y[0]-UNIT_SIZE;
			break;
		case'D':
			y[0] = y[0]+UNIT_SIZE;
			break;
		case'L':
			x[0] = x[0]-UNIT_SIZE;
			break;
		case'R':
			x[0] = x[0]+UNIT_SIZE;
			break;
		}
		
	}
	
	public void checkCake() {
		if((x[0]==cakeX)&&(y[0]==cakeY)) {
			bodyParts++;
			cakesEaten++;
			newCake();
		}
		
	}
	
	public void checkCollisons() {
		//checks if head collides with body
		for(int i=bodyParts;i>0;i--) {
			if((x[0]==x[i])&&(y[0]==y[i])) {
				running = false;
			}
		}
		//checks if head touches left border
		if(x[0]<0){
			running = false;
		}
		//checks if head touches right border
		if(x[0]>SCREEN_WIDTH-UNIT_SIZE){
			running = false;
		}
		//checks if head touches top border
		if(y[0]<0){
			running = false;
		}
		//checks if head touches bottom border
		if(y[0]>SCREEN_HEIGHT-UNIT_SIZE){
			running = false;
		}
		
		if(!running) {
			timer.stop();
		}
	}
	
	public void gameOver(Graphics g) {
		// Game Over Text
		g.setColor(Color.red);
		g.setFont(new Font("Georgia",Font.BOLD,40));
		FontMetrics metrics = getFontMetrics(g.getFont());
		g.drawString("Game Over",(SCREEN_WIDTH - metrics.stringWidth("Game Over"))/2, g.getFont().getSize());
		
		// Score Text
		
		g.setColor(Color.red);
		g.setFont(new Font("Georgia",Font.BOLD,50));
		FontMetrics metrics2 = getFontMetrics(g.getFont());
		g.drawString("Score: "+cakesEaten,(SCREEN_WIDTH - metrics2.stringWidth("Score: "+cakesEaten))/2,SCREEN_HEIGHT/2);
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(running == true) {
			move();
			checkCake();
			checkCollisons();
		}
		repaint();
		
	}

	public class myKeyAdapter extends KeyAdapter{
		@Override
		public void keyPressed(KeyEvent e) {
			switch (e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if(direction!='R') {
					direction = 'L';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if(direction!='L') {
					direction = 'R';
				}
				break;
			case KeyEvent.VK_UP:
				if(direction!='D') {
					direction = 'U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if(direction!='U') {
					direction = 'D';
				}
				break;	

			}
		}
		
	}

}
